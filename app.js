const express = require("express");
const app = express();
const port = 3000;
app.listen(port, () => {
  console.log(
    `Example app listening on port ${port}`
  );
});
//   We'll be taking much of the functionality we implemented in class and refactoring it to use objects. Refactoring means to redo the code without altering the core functionality.
//   - We currently have 4 CRUD routes implemented for our server
//   - POST /new-movie creates a new movie in our movie list by pushing the incoming string from the request body into the movie list array
//   - GET /all-movies responds to the HTTP request with the entire movie list
//   - PUT /update-movie/:titleToUpdate searches for a movie title matching the route parameter (const titleToUpdate = req.params.titleToUpdate) and updates the movie title with the incoming data from the request body (const newTitle = req.body.newTitle)
//   - DELETE /delete-movie/:titleToDelete searches for a movie title matching the route parameter (const titleToDelete = req.params.titleToDelete) and deletes it from the movie list array
//   - The movie list is currently an array of strings: ["Star Wars", "The Avengers"]
//   - The first step is to redo the items in the movie list to be objects instead with the following shape/format:
//   - {
//   title: {String},
//   starRating: {Number},
//   isRecommended: {Boolean},
//   createdAt: {Date},
//   lastModified: {Date}
//   }
//   - Note:
//   - By changing the entries in the movie array to be objects instead of strings, we can store more data per movie and still use our array methods to search through them.
//   - The fields in the movie object will be generated by the user and will be sent in the request body when we POST a new movie.
//   - Requirement: Change ALL the items in the favoriteMovieList array to be objects instead of strings
//   - For example, I would replace the string "Star Wars" in the array with the following object:
//   - {
//   title: "Star Wars",
//   starRating: 5,
//   isRecommended: true,
//   createdAt: 2022-09-07T18:18:48.586Z,
//   lastModified: 2022-09-07T18:18:48.586Z
//   }
//   - Note:
//   - createdAt represents the datetime the movie object was created
//   - lastModified represents the datetime last time the movie object was updated
//   - Feel free to add more movies to the array if you want to work with a larger dataset
//   - Note: The property createdAt can be generated with a new date every time the server restarts
//   - Now we need to update our CRUD routes to work with the new format of the items in the movies array
//   - Requirement: Refactor the POST /new-movie route
//   - First, the route should get the title, starRating and isRecommended from the req.body
//   - Second, the route should create a new object with the above properties along with createdAt, and lastModified which should be generated using new Date()
//   - Third, the route should push the new object into the movie list array as a new movie
//   - Requirement: Refactor the PUT /update-movie/:titleToUpdate route
//   - First, similar to the /new-movie route, the /update-movie/:titleToUpdate route now needs to get the new title, the new starRating and the new isRecommended values from the req.body
//   - Second, the route should search the movie list array for the movie with the title matching titleToUpdate
//   - Note: Instead of using .indexOf() which cannot search for objects, we need to use the .findIndex() method instead. .findIndex() takes in a function as its argument and the return value of that function must be true for the item you are searching for and false for any other item. In our case, we want to use a function similar to: .findIndex((movie)=>{return movie.title === titleToDelete})
//   - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex
//   - Question: Should createdAt and lastModified both be updated, one or the other, or neither?
//   - Third, the route should overwrite the values of that particular movie object with the new values we received from the req.body
//   - Requirement: Refactor the DELETE /delete-movie/:titleToDelete route
//   - This route will require minimal changes as the only line of code we need to update is the .indexOf() method to the .findIndex() method.
//   - Requirement: Create a new route GET /single-movie/:titleToFind
//   - First, the route should get the title of the movie we want to find from the route params (req.params)
//   - Second, the route should search the movies array for the movie object whose title matches the one we got from the route params
//   - Third, the route should respond with object of the found movie using res.json()
//   - By this point, all the CRUD functionality we implemented should be working again along with our new route. Test your routes with Postman to verify they are all working.
//   - Stretch Goal: Update the GET /all-movies route
//   - Add functionality to the route so that an optional route parameter called minStarRating can be added to the url
//   - If the minStarRating route parameter exists, then the route should only respond with movies whose star rating is equal to or greater than the minStarRating
//   - For instance:
//   - If we request the follwing URL: localhost:3000/all-movies?minStarRating=3
//   - And if we have the following movies in our movie list:

let Movies = [];
let globlalAddMovie =
  null;
//   - PUT /update-movie/:titleToUpdate searches for a movie title matching the route parameter (const titleToUpdate = req.params.titleToUpdate)
// and updates the movie title with the incoming data from the request body (const newTitle = req.body.newTitle)

app.get(
  "/",
  (req, res) => {
    const date =
      new Date();
    let name =
      "Dan Rothwell";
    res.send(
      name + " " + date
    );
  }
);

app.get(
  "/list-movies",
  (req, res) => {
    let avengers = [
      "avengers",
    ];
    let LOTR = ["LOTR"];
    Movies.push(
      avengers,
      LOTR
    );
    let movieList =
      Movies.join(" ");

    res.send(movieList);
  }
);

app.post(
  "/new-movie",
  (req, res) => {
    const newMovie = {
      title: "",
      starRating: 0,
      isRecommended: false,
      createdAt:
        new Date(),
      lastModified:
        new Date(),
    };

    if (
      req.body.title ===
      undefined
    ) {
      res.json({
        success: false,
        message:
          "title is a required field",
      });
      return;
    } else {
      newMovie.title =
        req.body.title;
    }

    if (
      req.body
        .starRating ===
      undefined
    ) {
      res.json({
        success: false,
        message:
          "starRating is a required field",
      });
      return;
    } else {
      newMovie.starRating =
        req.body.starRating;
    }

    if (
      req.body
        .isRecommended ===
      undefined
    ) {
      console.log(
        "isRecommended is not defined"
      );
      res.json({
        success: false,
        message:
          "isRecommended is a required field",
      });
      return;
    } else {
      console.log(
        "isRecommended is defined"
      );
      newMovie.isRecommended =
        req.body.isRecommended;
    }

    Movies.push(
      newMovie
    );

    // We must respond to the request, so for now we'll send back a hardcoded object
    res.json({
      success: true,
    });
  }
);

app.get(
  "/add-movie",
  (req, res) => {
    const localAddMovie =
      req.query.addMovie;
    for (
      let i = 0;
      i <
      localAddMovie.length;
      i++
    ) {
      if (
        localAddMovie[
          i
        ] === "+"
      ) {
        localAddMovie[
          i
        ].replace(" ");
      }
    }
    globlalAddMovie =
      localAddMovie;
    Movies.push(
      globlalAddMovie
    );

    res.send(Movies);
  }
);

app.get(
  "/list-movies",
  (req, res) => {
    res.send(Movies);
  }
);
app.put(
  "/update-one/:blogTitle",
  (req, res) => {
    const date =
      new Date();

    let text =
      req.body.text;
    let author =
      req.body.author;
    let category =
      req.body.category;

    let blogTitle =
      req.params
        .blogTitle;

    const updatedBlogIndex =
      Movies.findIndex(
        (blog) => {
          if (
            blog.title ===
            blogTitle
          ) {
            return true;
          } else {
            return false;
          }
        }
      );
    const updatedBlog =
      Movies[
        updatedBlogIndex
      ];

    const updatedBlogUpdate =
      {
        title:
          updatedBlog.title,
        text: text,
        author: author,
        category:
          category,
        createdAt:
          updatedBlog.createdAt,
        lastModified:
          date,
      };

    Movies.push(
      updatedBlog
    );

    res.json({
      success: true,
      message: "Updated",
    });
  }
);
